export _ASH_LOG_LEVEL=3
export _ASH_LOG_FILE=
export _ASH_LOG_TITLE=

ASH_LOG_NAMES=("TRACE" "DEBUG" "INFO" "WARN" "ERROR")
_ASH_LOG_LEVELS=(5 4 3 2 1)

function ash_log_level {
    if [[ $# -eq 0 ]]; then
        echo "$_ASH_LOG_LEVEL"
    else
        set_to=$1
        if [[ ${#set_to} -eq 1 ]]; then
            export _ASH_LOG_LEVEL=$set_to
        else
            export _ASH_LOG_LEVEL=$(ash_log_get $set_to)
        fi
    fi
}

function ash_log_file {
    if [[ $# -eq 0 ]]; then
        echo "$_ASH_LOG_FILE"
    else
        export _ASH_LOG_FILE=$1
    fi
}

function ash_log_title {
    if [[ $# -eq 0 ]]; then
        echo "$_ASH_LOG_TITLE"
    else
        export _ASH_LOG_TITLE=$1
    fi
}

function ash_log_clear {
    if [[ -f $_ASH_LOG_FILE ]]; then
        rm $_ASH_LOG_FILE
    fi
}

function ash_log_get {
    # $1 = name
    if [[ ! ${ASH_LOG_NAMES[@]} =~ "$1" ]]; then
        echo 99
        return
    fi

    for ((i=0; $i<${#ASH_LOG_NAMES[@]}; i++)); do
        if [[ "${ASH_LOG_NAMES[$i]}" == "$1" ]]; then
            echo "${_ASH_LOG_LEVELS[$i]}"
            return
        fi
    done
}

function _ash_log {
    # $1 level
    # $2 name
    # $3 message
    local log_level="$1"
    local log_name="$2"
    local log_msg="$3"
    shift
    shift
    shift

    local log_number=$(ash_log_get $log_level)

    local log_date="$(date +"%Y-%m-%d_%H%M%S")"
    if [[ ! -z $_ASH_LOG_TITLE ]]; then
        log_name="$_ASH_LOG_TITLE.$log_name"
    fi
    local log_header="$log_date $log_name <$log_level>"

    if [[ ! -z $_ASH_LOG_FILE ]]; then
        echo "${log_header}: $log_msg" >> $_ASH_LOG_FILE
    fi

    if [[ $log_number -gt $_ASH_LOG_LEVEL ]]; then
        return
    fi

    echo -ne "$(ash-esc -s dim)"
    echo -ne "${log_date} "
    echo -ne "$(ash-esc -s bold -c fcyan)"
    echo -ne "${log_name}"
    echo -ne "$(ash-esc -r)"
    echo -ne "$(ash-esc -s dim)"
    echo -ne " <${log_level}>: "
    echo -ne "$(ash-esc -r)"
    case $log_level in
        TRACE)
            echo -ne "$(ash-esc -s dim -c fblue)"
            ;;
        DEBUG)
            echo -ne "$(ash-esc -s dim -c fgreen)"
            ;;
        INFO)
            echo -ne "$(ash-esc -s bold -c fwhite)"
            ;;
        WARN)
            echo -ne "$(ash-esc -s bold -c fyellow)"
            ;;
        ERROR)
            echo -ne "$(ash-esc -s bold -c fred)"
            ;;
        *)
            ;;
    esac
    echo -ne "${log_msg}"
    echo -ne "$(ash-esc -r)"
    echo ""
}

function ash_trace {
    # $1 name
    # $2 message
    _ash_log "TRACE" "$1" "$2"
}

function ash_debug {
    # $1 name
    # $2 message
    _ash_log "DEBUG" "$1" "$2"
}

function ash_info {
    # $1 name
    # $2 message
    _ash_log "INFO" "$1" "$2"
}

function ash_warn {
    # $1 name
    # $2 message
    _ash_log "WARN" "$1" "$2"
}

function ash_error {
    # $1 name
    # $2 message
    _ash_log "ERROR" "$1" "$2"
}
